<?php

# This file is part of the PhpOnRails Framework
# (Copyright) 2010-2014 Bruce chou from bermi's  project
# See LICENSE and CREDITS for details

/**
* Suite of assertions to test routes generated by Rails and the handling of 
* requests made to them.
* 
* These assertions are available in your tests when 
* extending AkControllerUnitTest
*/

class AkRoutingAssertions
{

    public function setExtendedBy(&$UnitTester) {
        $this->_UnitTester = $UnitTester;
    }

    /**
    * Asserts that the routing of the given +path+ was handled correctly and 
    * that the parsed options (given in the +expected_options+ array) match 
    * +path+. Basically, it asserts that Rails recognizes the route given by 
    * +expected_options+.
    *
    * Pass an array in the second argument (+path+) to specify the request 
    * method. This is useful for routes requiring a specific HTTP method.  
    * The array should contain a +path+ with the incoming request path and 
    * a +method+ containing the required HTTP verb.
    *
    * Assert that POSTing to /items will call the create action
    * on ItemsController
    * 
    *     $this->assertRecognizes(
    *               array('controller'=>'items', 'action'=>'create'), 
    *               array('path'=>'items', 'method'=>'post')
    *           );
    *
    * You can also pass in +extras+ with an array containing URL parameters that
    * would normally be in the query string.  This can be used to assert that
    * values in the query string string will end up in the params array
    * correctly. To test query strings you must use the extras argument, 
    * appending the query  string on the path directly will not work.
    * For example:
    *
    * Assert that a path of '/items/list/1?view=print' 
    * returns the correct options
    *
    *     $this->assertRecognizes(
    *               array(
    *                       'controller'=>'items', 'action'=>'list', 
    *                       'id' => 1, 'view'=>'print'), 
    *               'items/list/1', 
    *               array('view'=>'print')
    *           );
    *
    * The +message+ parameter allows you to pass in an error message that is 
    * displayed upon failure.
    *
    * ==== Examples
    *
    * Check the default route (i.e., the index action)
    *
    *     $this->assertRecognizes(
    *               array('controller' => 'items', 'action'=>'index'), 
    *               'items'
    *           );
    *
    * Test a specific action
    *
    *     $this->assertRecognizes(
    *               array('controller' => 'items', 'action'=>'list'), 
    *               'items/list'
    *           );
    *     
    * Test an action with a parameter
    *
    *     $this->assertRecognizes(
    *               array(
    *                   'controller' => 'items', 'action'=>'destroy', 
    *                   'id' => 1), 
    *               'items/destroy/1'
    *           );
    *     
    * Test a custom route
    *
    *     $this->assertRecognizes(
    *               array('controller' => 'items', 'action'=>'show', 'id' => 1), 
    *               'view/item1'
    *           );
    *     
    * Check a Simply RESTful generated route
    *
    *     $this->assertRecognizes(list_items_parameters(), 'items/list');
    */
    public function assertRecognizes($expected_options, $path, $extras = array(), $message = null, $asserts = true) {
        if(is_array($path)){
            $request_method = $path['method'];
            $path           = $path['path'];
        }else{
            $request_method = null;
        }

        $Request = $this->recognizeRouteForPath($path, $request_method);

        foreach ($extras as $k => $v){
            if(!is_null($v)){
                unset($expected_options[$k]);
            }
        }

        $parameters = $Request->getParameters();

        ksort($parameters);
        ksort($expected_options);

        $routing_diff = array_diff_assoc($parameters, $expected_options);

        $message = empty($message) ?
        Ak::t("The recognized options for {'path':'%path','method':'%request_method'}:\n%parameters  ... did not match expected:\n%expected_options,\ndifference: %routing_diff\n",
        array(
        '%expected_options' =>  json_encode($expected_options),
        '%parameters'       =>  json_encode($parameters),
        '%routing_diff'     =>  json_encode($routing_diff),
        '%path'             =>  $path,
        '%request_method'   =>  empty($request_method) ? 'get' : $request_method,
        )) :
        $message;

        if($asserts){
            $this->_UnitTester->assertEqual($parameters, $expected_options, $message);
        }
        return $parameters == $expected_options;
    }

    /**
    * Asserts that the provided options can be used to generate the provided 
    * path.  This is the inverse of +assertRecognizes+.
    * The +extras+ parameter is used to tell the request the names and values of
    * additional request parameters that would be in a query string. 
    * The +message+ parameter allows you to specify a custom error message for 
    * assertion failures.
    *
    * The +defaults+ parameter is unused.
    *
    * ==== Examples
    *
    * Asserts that the default action is generated for a route with no action
    *
    *     $this->assertGenerates(
    *               '/items', 
    *               array('controller'=>'items', 'action'=>'index')
    *           );
    *
    * Tests that the list action is properly routed
    *
    *     $this->assertGenerates(
    *               '/items/list', 
    *               array('controller'=>'items', 'action'=>'list')
    *           );
    *
    *  Tests the generation of a route with a parameter
    * 
    *     $this->assertGenerates(
    *               '/items/list/1', 
    *               array('controller'=>'items', 'action'=>'list', 'id'=>'1')
    *           );
    *
    * Asserts that the generated route gives us our custom route
    * 
    *     $this->assertGenerates(
    *               'changesets/12', 
    *               array(
    *                   'controller'=>'scm', 'action'=>'show_diff', 
    *                   'revision' => 12)
    *           );
    */
    public function assertGenerates($expected_path, $options = array(), $defaults= array(), $extras = array(), $message=null){
        $options = array_merge($options, $defaults);
        if(@$expected_path[0] != '/'){
            $expected_path = '/'.$expected_path;
        }
        $this->Router = empty($this->Router) ? AkRouter::getInstance() : $this->Router;

        $generated_path = (string)$this->Router->urlize($options);
        if(!empty($extras)){

            $parsed = parse_url($generated_path);

            if(!empty($parsed['query'])){
                $vars = array();
                parse_str($parsed['query'], $vars);
                krsort($vars);
                krsort($extras);
                $this->_UnitTester->assertEqual($vars, $extras, 'Extra parameters '.json_encode($extras).' do not match '.json_encode($vars).' found in path '.$expected_path);
                $generated_path = str_replace('?'.$parsed['query'], '', $generated_path);
            }else{
                $this->_UnitTester->fail('Extra parameters '.json_encode($extras).' not found in path '.$expected_path);
            }
        }

        $this->_UnitTester->assertEqual($expected_path, $generated_path);
    }




    /**
    * Asserts that path and options match both ways; in other words, it verifies
    * that <tt>path</tt> generates <tt>options</tt> and then that 
    * <tt>options</tt> generates <tt>path</tt>.  This essentially combines
    * +assertRecognizes+ and +assertGenerates+ into one step.
    *
    * The +extras+ array allows you to specify options that would normally be 
    * provided as a query string to the action.  The +message+ parameter allows
    * you to specify a custom error message to display upon failure.
    *
    * ==== Examples
    *
    * Assert a basic route: a controller with the default action (index)
    *
    *     $this->assertRouting(
    *               '/home', 
    *               array('controller'=>'home', 'action'=>'index')
    *           );
    *
    * Test a route generated with a specific controller, action, and 
    * parameter (id)
    *
    *     $this->assertRouting(
    *               '/entries/show/23', 
    *               array('controller'=>'entries', 'action'=>'show', 'id'=>23)
    *           );
    *
    * Assert a basic route (controller + default action), with an error message 
    * if it fails
    *
    *     $this->assertRouting(
    *               '/store', 
    *               array('controller'=>'store', 'action'=>'index'), 
    *               array(), 
    *               array(), 
    *               'Route for store index not generated properly'
    *           );
    *
    * Tests a route, providing a defaults array
    *
    *     $this->assertRouting(
    *               'controller/action/9', 
    *               array('id'=>'9', 'item'=>'square'), 
    *               array('controller'=>'controller', 'action'=>'action'), 
    *               array('item'=>'square')
    *           );
    *
    * Tests a route with a HTTP method
    *
    *     $this->assertRouting(
    *               array('method'=>'put', 'path'=>'/product/321'), 
    *               array('controller'=>'product', 'action'=>'update', 'id'=>'321')
    *           );
    */
    public function assertRouting($path, $options, $defaults = array(), $extras = array(), $message = null){
        $options = array_merge($options, $defaults);

        $this->assertRecognizes($options, $path, $extras, $message);
        $this->assertGenerates(is_array($path) ? $path['path'] : $path, $options, $defaults, $extras, $message);
    }


    // Used mainly for testing Rails core with multiple routing schemes
    public $Router = null;
    public function nextAssertionUsingRouter($Router){
        $this->Router = $Router;
        Ak::setStaticVar('AkRouterSingleton', $this->Router);
    }

    // Recognizes the route for a given path.
    public function recognizeRouteForPath($path, $request_method = null){

        $path = is_string($path) ? '/'.ltrim($path,'/') : (function_exists($path) ? $path() : $path);

        // Assume given controller
        Ak::setStaticVar('AkRouterSingleton', $this->Router);

        $Request = $this->_UnitTester->partialMock(
        'AkRequest',
        array('getRequestedUrl', 'getPath', 'getMethod'),
        array(
        'getRequestedUrl'   => $path,
        'getPath'           => $path,
        'getMethod'         => empty($request_method) ? 'get' : ($request_method)
        )
        );

        Ak::setStaticVar('AkRequestSingleton', $Request);

        $Request->mapRoutes($this->Router);

        $UrlWriter = new AkUrlWriter($Request, $this->Router);
        Ak::setStaticVar('AkUrlWriterSingleton', $UrlWriter);

        return $Request;
    }





}
