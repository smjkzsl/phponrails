h2. The Sintags Template Language

This guide covers Sintags, the default template language for Rails Views. By referring to this guide, you will be able to:

* Write multilingual views.
* Iterate collections.
* Use rubiesque helper calls in your views.
* Extend Sintags with dialects.

endprologue.

WARNING. This Guide is based on Rails 2.0. Some of the code shown here will not work in other versions of Rails.



h3. Introduction

Sintags is the default template language in Rails. The initial goal when designing the Sintags was to allow WYSIWYG HTML editor compatibility using a simplistic approach to looping collections and printing variables.

Sintags will not prevent users from running PHP code on your views. The goal with Sintags is not building another full-fledged language. Itâ€™s to make coding views less frustrating and verbose. You will find many similarities between Sintags helper syntax and Ruby. Sintags code will be compiled into PHP for performance reasons.

The name Sintags comes uses the Spanish word _Sin_ which means without. Ironically, the only tag allowed in Sintags is the +&lt;hidden&gt;&lt;/hidden&gt;+ tag, which will skip the content within the tags.


h3. Basic Sintags syntax

Basic Sintags is what most designers will need to learn to work with the views. It is composed of the following elements:

| { | Starts a Sintag block |
| } | Ends a Sintag block |
| {var_name?} | Asserts if given element has been set by the controller and prints the value of +$var_name+ |
| {?var_name} | Asserts if element is not empty and starts a php condition block like +if(!empty($var_name)) {+. You need to close this blocks using +{end}+ or +&lt;?php } ?>+ |
| {end} | Closes a block generating +&lt;?php } ?>+ |
| {object.attribute} | +.+ is used for accessing object attributes. This is the same as +&lt;?php echo $object->attribute; ?>+ |
| {array-key} | +-+ is used for accessing array on a specific key. This is the same as +&lt;?php echo $array['key']; ?>+ |
| _{Multilingual text} | +_{ }+ will enclose a string for internationalization. |
| {_multilingual_var} | +{_ }+ will enclose a variable for internationalization. This variable must be an array with the current locale as the key. |
| {\var} | +{\ }+ will escape malicious html entities in +$var+ to avoid "XSS attacks":http://en.wikipedia.org/wiki/Cross-site_scripting. |
| {loop People} {end} | Iterates over a collection. In this case the variable +$Person+ will be available inside the loop.. |

The following examples will show you how Sintags is converted into PHP. These have been taken from the test suite.

h3. Printing variables, object attributes and array members

h4. Printing variables.

<tpl>
{comment}
</tpl>

<php>
<?php echo $comment; ?>
</php>



h4. Printing object attributes.

<tpl>
{post.Comments}
</tpl>

<php>
<?php echo $post->Comments; ?>
</php>



h4. Printing nested object attributes.

<tpl>
{post.Comments.latest}
</tpl>

<php>
<?php echo $post->Comments->latest; ?>
</php>



h4. Printing array members.

<tpl>
{people-members}
</tpl>

<php>
<?php echo $people['members']; ?>
</php>



h4. Printing array members with numeric indexes.

<tpl>
{people-0-member}
</tpl>

<php>
<?php echo $people[0]['member']; ?>
</php>



h4. Mixing object attributes and array members.

<tpl>
{people.members-0.name}
</tpl>

<php>
<?php echo $people->members[0]->name; ?>
</php>



h4. Mixing array members and object attributes.

<tpl>
{posts-latest.created_at}
</tpl>

<php>
<?php echo $posts['latest']->created_at; ?>
</php>



h3. Hiding stuff

You can remove blocks using the +hidden+ tag. The content inside +&lt;hidden&gt;&lt;/hidden&gt;+ will not be included in the compiled template.

<tpl>
<hidden><?php This will not be compiled or executed ?></hidden>
</tpl>

<php>
</php>



h3. Private variables

By convention, object attributes and array keys that start with an underscore are considered private. Therefore they will not compile to PHP.

<tpl>
{posts-cc._number}
</tpl>

<php>
{posts-cc._number}
</php>



h3. Filtering malicious html entities from variables

You should avoid "XSS attacks":http://en.wikipedia.org/wiki/Cross-site_scripting by escaping variables using a backslash after the opening brace.

<tpl>
{\comment}
</tpl>

<php>
<?php echo $controller->text_helper->h($comment); ?>
</php>

Also on object attributes and array elements.

<tpl>
{\comment.one}
</tpl>

<php>
<?php echo $controller->text_helper->h($comment->one); ?>
</php>



h3. Escaping from Sintags

If you want the Sintags parser to ignore content within braces, you can escape it by using a backslash like:

<tpl>
This \{should} \{be?} \{ignored\}. _\{Multilingual block} _\{escaped using\} \{?backslashes} \{end}
</tpl>

<php>
This {should} {be?} {ignored}. _{Multilingual block} _{escaped using} {?backslashes} {end}
</php>

Sometimes youâ€™ll have to print two sintags string separated by an underscore â€?+_{}+ is for multilingual block as we will see later. Then youâ€™ll have to escape the multilingual block start +_+ with a backslash.

<tpl>
{key}\_{loop_key}
</tpl>

<php>
<?php echo $key; ?>_<?php echo $loop_key; ?>
</php>



h3. Multilingual text

By prefixing with an underscore +_+ a Sintags block, youâ€™ll start a multilingual block.

<tpl>
<h1>_{Ain't easy to translate text?}</h1>
</tpl>

<tpl>
<h1><?php echo $controller->text_helper->translate('Ain\'t easy to translate text?', array()); ?></h1>
</tpl>

You can even include HTML.

<tpl>
_{<p>It's simple to add <a href='http://google.co.uk'>Localized links</a></p>}
</tpl>

<php>
<?php echo $controller->text_helper->translate(
  '<p>It\'s simple to add <a href=\'http://google.co.uk\'>Localized links</a></p>', 
  array()); ?>
</php>

If you need to nest brackets on multilingual blocks, you can escape them using a backslash.

<tpl>
_{I need to print \{something_inside_curly_brackets\}. 
_\{Maybe a multilingual text example\} }
</tpl>
  
<php>
<?php echo $controller->text_helper->translate(
    'I need to print {something_inside_curly_brackets}. 
    _{Maybe a multilingual text example} ', array()); ?>
</php>

If you need to include variables in multilingual Sintags blocks, you can do so by prefixing the variable with a +%+ symbol. This will bind the variables in the second parameter of the translation method.

<tpl>
<h1>_{You can use %variables using the %sintags.variable-naming-way}</h1>
</tpl>

<php>
<h1><?php echo $controller->text_helper->translate(
  'You can use %variables using the %sintags.variable-naming-way', array(
    '%variables' => @$variables, 
    '%sintags.variable-naming-way' => @$sintags->variable['naming']['way'])); ?></h1>
</php>

You should also escape variables binded to translations when using users input.

<tpl>
_{Signed up using %\email address}
</tpl>
  
<php>
<?php echo $controller->text_helper->translate('Signed up using %\email address', 
           array('%\email' => $controller->text_helper->h(@$email))); ?>
</php>



h3. Multilingual variables

When a variable is underscored at the beginning of a Sintags block, itâ€™s not considered private. Underscoring a variable will tell Sintags that the variable needs to be translated.

<tpl>
{_post.comment}
</tpl>

<php>
<?php echo empty($post->comment) || is_object($post->comment) ? '' : 
            $controller->text_helper->translate($post->comment); ?>
</php>



h3. Conditional printing

If your PHP error reporting settings are set to complain when using undeclared variables, you can prevent the notices by adding a question mark after the Sintags variable.

The following example will print the variable $comment only if not empty.

<tpl>
{comment?}
</tpl>

<php>
<?php echo empty($comment) ? '' : $comment; ?>
</php>



h3. Conditional Statements

You can use +{? }+ statement to execute some code only if a specified variable is +true+.

<tpl>
{?comment}Hello world{end}
</tpl>

<php>
<?php if(!empty($comment)) { ?>Hello world<?php } ?>
</php>

Or the +{! }+ statement to execute some code only if a specified variable is +false+.


<tpl>
{!Page.id}style="display:none;"{end}
</tpl>

<php>
<?php if(empty($Page->id)) { ?>style="display:none;"<?php } ?>
</php>


Conditional statements can also be used on object attributes

<tpl>
{?comment.author} {comment.author} {end}
</tpl>

<php>
<?php
if(!empty($comment->author)) { 
  echo $comment->author; 
} ?>
</php>

and on any object attribute array combination

<tpl>
{?comment.author} {comment.author} {?comment.author-name}  {comment.author-name} {end} {end}
</tpl>

<php>
<?php
  if(!empty($comment->author)) { 
    echo $comment->author;
    if(!empty($comment->author['name'])) {
      echo $comment->author['name']; 
    }
  }
?>
</php>

You can use +{else}+ syntax to execute a block with the opposite assertion.

<tpl>
{?comment.author}{comment.author}  {else}Anonymous coward  {end}
</tpl>

<php>
<?php 
if(!empty($comment->author)) {
  echo $comment->author;
} else {  ?>
Anonymous coward 
<?php } ?>
</php>



h3. Iterating a collection of elements. Sintags *loops*

Perhaps one of the most common and parts of sintags iterating over an array of items. In order to do so, Sintags uses a *{loop* _items_ *} {end}*

Sintags loops *expects a plural noun* for iterating and provides the singular form for each item.

<tpl>
{loop posts}
   <q> {post.comment} {post.author} </q>
{end}
</tpl>


as you can see, generated PHP code contains some useful variables which are helpful for formatting iterated collections

<php>
<?php empty($posts) ? null : $post_loop_counter = 0;
      empty($posts) ? null : $posts_available = count($posts);
      if(!empty($posts))
        foreach ($posts as $post_loop_key=>$post){ 
          $post_loop_counter++;
          $post_is_first = $post_loop_counter == 1;
          $post_is_last = $post_loop_counter == $posts_available;
          $post_odd_position = $post_loop_counter%2; ?>  
          <q> <?php echo $post->comment; ?> <?php $post->author; ?> </q> 
        <?php } ?>
</php>

Looping array elements will take the last item of the array as the variable name to singularize in the loop body.

<tpl>
{loop items-directories}  {end}
</tpl>

<php>
<?php empty($items['directories']) ? null : $directory_loop_counter = 0;
      empty($items['directories']) ? null : $directories_available = count($items['directories']);
      if(!empty($items['directories'])) 
        foreach ($items['directories'] as $directory_loop_key=>$directory){
          $directory_loop_counter++;
          $directory_is_first = $directory_loop_counter == 1;
          $directory_is_last = $directory_loop_counter == $directories_available;
          $directory_odd_position = $directory_loop_counter%2; ?> <?php 
        } ?>
</php>


The same works for object attributes. In this case given Post.author.friends it will set individual items as $friend.

<tpl>
{loop Post.author.friends}  {end}
</tpl>

<php>
<?php
  empty($Post->author->friends) ? null : $friend_loop_counter = 0;
  empty($Post->author->friends) ? null : $friends_available = count($Post->author->friends);
  if(!empty($Post->author->friends)) 
    foreach ($Post->author->friends as $friend_loop_key=>$friend){
      $friend_loop_counter++;
      $friend_is_first = $friend_loop_counter == 1;
      $friend_is_last = $friend_loop_counter == $friends_available;
      $friend_odd_position = $friend_loop_counter%2; 
    ?> <?php } ?>
</php>


If you canâ€™t match the convention giving a plural word, or you just want a different name in the loop, you can specify it using the the +as+ key.

<tpl>
{loop Post.versions as Post}  {end}
</tpl>

<php>
<?php
empty($Post->versions) ? null : $Post_loop_counter = 0;
empty($Post->versions) ? null : $Posts_available = count($Post->versions);
if(!empty($Post->versions)) 
  foreach ($Post->versions as $Post_loop_key=>$Post){
    $Post_loop_counter++;
    $Post_is_first = $Post_loop_counter == 1;
    $Post_is_last = $Post_loop_counter == $Posts_available;
    $Post_odd_position = $Post_loop_counter%2; 
  ?> <?php } ?>
</php>



h3. Cleaning up lazy PHP

Sintags will expand your old-school shorthand php tags to prevent PHP from barking on runtime.

<tpl>
<?=PHP_CONSTANTS?>
</tpl>

<php>
<?php echo PHP_CONSTANTS?>
</php>

It will also take care of preventing the famous xml declaration bug for you.

<tpl>
<?xml version="1.0" encoding="UTF-8" ?>
</tpl>

<php>
<?php echo '<?xml'; ?> version="1.0" encoding="UTF-8" ?>
</php>



INFO: *Ruby-esque Sintags syntax.*   Sintags provides a shorthand method for calling helper functions in your views.  This syntax is modeled after Rubyâ€™s erb template language and makes it simpler for designers to jump from Rails to PHP views. If you are used to Rails this might sound familiar.  If you prefer writing helpers in php, go ahead, Sintags does not force you to use the Ruby-esque way.



h3. Examples using the helpers registered by Rails

Calling the render helper.

<tpl>
<%= render :partial => "account", :locals => { :account => @buyer } %>
</tpl>


<php>
<?php echo $controller->render( array(
  'partial' => "account", 
  'locals' => array('account' => $buyer))); ?>
</php>

Link to using object attributes.

<tpl>
<%= link_to(document.title, :controller => "document", :action => "show", :id => document.id) %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
  $document->title, array(
    'controller' => "document", 
    'action' => "show", 
    'id' => $document->id)); ?>
</php>

Linking and translating.

<tpl>
<%= link_to (translate("Visit Other Site"), "http://www.rails.org/", :confirm => "Are you sure?" ) %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
  $controller->text_helper->translate("Visit Other Site"), 
  "http://www.rails.org/", 
  array('confirm' => "Are you sure?")); ?>
</php>

More translations.

<tpl>
<%= translate 'Write me home' %>
</tpl>

<php>
<?php echo $controller->text_helper->translate('Write me home'); ?>
</php>

Escaping double quotes.

<tpl>
<%= translate "Let's \"Jump\"", "D'Rails Way" %>
</tpl>

<php>
<?php echo $controller->text_helper->translate("Let's \"Jump\"", "D'Rails Way"); ?>
</php>

Symbols are treated as strings.

<tpl>
<%= translate :page_title %>
</tpl>

<php>
<?php echo $controller->text_helper->translate('page_title'); ?>
</php>

Translating variables.

<tpl>
<%= translate @weekday %>
</tpl>

<php>
<?php echo $controller->text_helper->translate($weekday); ?>
</php>

Translating arrays.

<tpl>
<%= translate @date-weekday %>
</tpl>

<php>
<?php echo $controller->text_helper->translate($date['weekday']); ?>
</php>

Using the optional parenthesis.

<tpl>
<%= link_to ("Visit Other Site", "http://www.rails.org/", {:confirm => "Are you sure?"} ) %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
    "Visit Other Site", 
    "http://www.rails.org/", 
    array('confirm' => "Are you sure?")); ?>
</php>

The last set of options does not require to be enclosed in braces.

<tpl>
<%=link_to "Delete Image", { 
              :action => "delete", 
              :id => @image.id 
            }, 
            :confirm => "Are you sure?", 
            :method => :delete %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
        "Delete Image", 
        array(
          'action' => "delete", 
          'id' => $image->id), 
        array(
          'confirm' => "Are you sure?", 
          'method' => 'delete')); ?>
</php>

Arrays without implicit indexes.

<tpl>
<%= link_to "Visit Other Site", "http://www.rails.org/", 
            :confirm => "Are you sure?", 
            :options => ["Yes", 'No'] %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
            "Visit Other Site", 
            "http://www.rails.org/", 
            array(
              'confirm' => "Are you sure?", 
              'options' => array("Yes", 'No'))); ?>
</php>

Nesting function calls.

<tpl>
<%= link_to ( translate("Visit Other Site"), "http://www.rails.org/", {
                  :confirm => "Are you sure?"} ) %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
  $controller->text_helper->translate("Visit Other Site"), 
  "http://www.rails.org/", 
  array('confirm' => "Are you sure?")); ?>
</php>

Setting booleans and nullâ€™s.

<tpl>
<%= url_for true, false, null %>
</tpl>

<php>
<?php echo $controller->url_helper->url_for(true, false, null); ?>
</php>

Shorthand for translate.

<tpl>
<%= _('Write me home') %>
</tpl>

<php>
<?php echo $controller->text_helper->translate('Write me home'); ?>
</php>

Even shorter translate alias.

<tpl>
<%= _'Write me home' %>
</tpl>

<php>
<?php echo $controller->text_helper->translate('Write me home'); ?>
</php>

Binding basic Sintags into method parameters.

<tpl>
<%= link_to "Posted by #{Post.author}" %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to("Posted by ".$Post->author.""); ?>
</php>

Nesting Sintags calls.

<tpl>
<%= link_to "Status: #{translate 'active',{'key'=> Value.text}, :foo => _('Bar')}" %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
  "Status: ".$controller->text_helper->translate('active', array(
    'key' => $Value->text
    ), array(
      'foo' => $controller->text_helper->translate('Bar'))).""); ?>
</php>

Simpler nested call.

<tpl>
<%= link_to "Status: #{translate 'active'}" %>
</tpl>

<php>
<?php echo $controller->url_helper->link_to(
  "Status: ".$controller->text_helper->translate('active').""); ?>
</php>

Using url functions in Rails.

<tpl>
<%= named_route_path :action => 'select_database' %>
</tpl>

<php>
<?php echo named_route_path( array('action' => 'select_database')); ?>
</php>

Emulating simple blocks.

<tpl>
<% keys {|key| echo $key} %>
</tpl>

<php>
<?php if(!empty($keys)){
  foreach (array_keys((array)$keys) as $ak_sintags_key){
    $key = $keys[$ak_sintags_key];
    echo $key;
  }}?>
</php>

Assigning the result of a block.

<tpl>
<% incremented = keys {|key| ++$key} %>
</tpl>

<php>
<?php if(!empty($keys)){
  $incremented = array();
  foreach (array_keys((array)$keys) as $ak_sintags_key){
    $key = $keys[$ak_sintags_key];
    ++$key;
    $incremented[$ak_sintags_key] = $keys[$ak_sintags_key];
  }}?>
</php>

Simple assignments.

<tpl>
<% simple_var = 'value' %>
</tpl>

<php>
<?php $simple_var = ('value'); ?>
</php>

Assigning array members.

<tpl>
<% simple_var = var-foo %>
</tpl>

<php>
<?php $simple_var = ($var['foo']); ?>
</php>

Assigning object attributes.

<tpl>
<%= var = var.foo %>
</tpl>

<php>
<?php $var = ($var->foo); ?>
</php>

Assigning the result of a helper method.

<tpl>
<% url = url_for(:controller => 'page') %>
</tpl>

<php>
<?php $url = ($controller->url_helper->url_for( array('controller' => 'page'))); ?>
</php>

Assigning an array.

<tpl>
<% url = {:controller => 'page'} %>
</tpl>

<php>
<?php $url = (array('controller' => 'page')); ?>
</php>

Assigning an array without braces.

<tpl>
<% url = :controller => 'page' %>
</tpl>

<php>
<?php $url = ( array('controller' => 'page')); ?>
</php>



h3. Using Sintags outside Rails

You can "download Sintags from Github":http://github.com/bermi/sintags and include it your project in a pretty straight forward way.

<php>
// include the autoloader
include 'src/autoload.php';

// Create a Sintags instance
$Sintags = new AkSintagsParser();

$sintags_text = '{var}';

//Parse the Sintags string

$php_code = $Sintags->parse($sintags_text);
    
// $php_code will contain => <?php echo $var; ?>
</php>

You should cache generated php code to avoid hitting the Sintags engine for the same content.



h3. Sintags helpers

You can register helpers in Sintags by defining the SINTAGS_AVAILABLE_HELPERS constant with a serialized list of helpers.

<php>
define('SINTAGS_AVAILABLE_HELPERS', serialize(array(
  'url_for' => 'url_helper',
  'render'  => 'controller',
  'h'       => 'text_helper'
  )));
</php>

Using the above declaration will add the methods url_for, render and h to Ruby-esque sintags, which can be written like:

<tpl>
<%= url_for Person %>
</tpl>

which will be converted to

<php>
<?php echo $url_helper->url_for($Person); ?>
</php>

The usefulness comes when things get more complex. For example nesting helpers like:

<tpl>
<%= url_for h(Person) %>
</tpl>

which will be converted to

<php>
<?php echo $url_helper->url_for($text_helper->h($Person)); ?>
</php>



h3. Contributing and reporting bugs

"The Project is hosted on Github":http://github.com/bermi/sintags so if you want to contribute, fork the project, make your changes and "open a ticket":http://github.com/bermi/sintags/issues to let me know what youâ€™ve fixed or implemented so I can merge it on the main repository.

Please notify about "bugs on the git hub issues page":http://github.com/bermi/sintags/issues